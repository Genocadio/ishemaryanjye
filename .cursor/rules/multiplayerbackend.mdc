---
description: 
globs: 
alwaysApply: false
---
Here are the backend rules for connecting frontend and this backend is working at localhost 8080 for player name and id sis for currentely logged in user 

Frontend Guide: Creating and Joining a Game
This guide provides a step-by-step process for a client application to create a new game match and establish a WebSocket connection for players.

Step 1: Create a New Match
To start, you must first ask the server to create a new match. This is done via an HTTP POST request.

Action: Send a POST request to the /create-match endpoint.

Method: POST

Endpoint: http://<server_address>:<port>/create-match

Headers: Content-Type: application/json

Body (optional): You can specify the number of players per team. If you omit the body, it defaults to 2.

{
  "teamSize": 2
}
Example Request (using cURL):
curl -X POST http://localhost:8080/create-match \
-H "Content-Type: application/json" \
-d '{ "teamSize": 2 }'
Expected Server Response (Success):
The server will respond with a JSON object containing the matchId and, most importantly, the unique invite codes and full WebSocket URLs for each team.

Status Code: 200 OK

Body:

{
  "matchId": "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8",
  "teamSize": 2,
  "team1": {
    "inviteCode": "ABCDEF",
    "wsUrl": "ws://localhost:8080/invite/ABCDEF",
    "joinUrl": "ws://localhost:8080/invite/ABCDEF?name=YourName"
  },
  "team2": {
    "inviteCode": "GHIJKL",
    "wsUrl": "ws://localhost:8080/invite/GHIJKL",
    "joinUrl": "ws://localhost:8080/invite/GHIJKL?name=YourName"
  },
  "info": {
    "message": "Share the appropriate team invite URL with players",
    "optionalParams": "Add ?playerId=yourId&name=yourName to reconnect with existing identity"
  }
}
Next Step: Your application should now store this information. The wsUrl for each team is what you will use to connect the players.

Step 2: Connect Players via WebSocket
Now that you have the invite URLs, you can establish a WebSocket connection for each player.

Action: Create a WebSocket connection using the wsUrl provided in the previous step.

URL: Use the wsUrl corresponding to the player's assigned team.
Optional Parameters: You can append query parameters to the URL to provide player details.
name: The player's display name.
playerId: A unique ID for the player to enable reconnection.
Example Connection (JavaScript):
Let's assume the player is joining Team 1 and their name is "Zelda".

// From the response in Step 1, we got:
const team1_wsUrl = "ws://localhost:8080/invite/ABCDEF";

// Append player info as query parameters
const playerName = "Zelda";
const playerId = "zelda-unique-id-123"; // A persistent ID for this user

const finalUrl = `${team1_wsUrl}?name=${encodeURIComponent(playerName)}&playerId=${encodeURIComponent(playerId)}`;

// Establish the connection
const socket = new WebSocket(finalUrl);